/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oz = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"instruction":3,"EOF":4,"variable_creation":5,"KEYWORD_SKIP":6,"block":7,"if_then_statement":8,"if_then_else_statement":9,"smth":10,"case_of_statement":11,"procedure_call":12,"variable_initializer":13,"cell_initializer":14,"cell_getter":15,"variable_use":16,"KEYWORD_END":17,"variable_decl":18,"KEYWORD_LOCAL":19,"variable_creation_id":20,"KEYWORD_IN":21,"IDENTIFIER":22,"OPERATOR_ASSIGNMENT":23,"variable_assign":24,"expression":25,"OPERATOR_CELL_ASSIGNMENT":26,"cell_assign":27,"OPERATOR_CELL_GET":28,"if_use":29,"if_cond":30,"KEYWORD_IF":31,"KEYWORD_THEN":32,"if_use_else":33,"KEYWORD_ELSE":34,"case_use":35,"case_cond":36,"case_eval":37,"KEYWORD_CASE":38,"KEYWORD_OF":39,"pattern":40,"LABEL":41,"(":42,"records_list":43,")":44,"formal_parameter_list":45,"formal_parameter":46,"QUESTION_MARK":47,"formal_parameter_list_call":48,"formal_parameter_call":49,"EMBRACE":50,"UNBRACE":51,"expression_case":52,"records_entry":53,"COLON":54,"INTEGER":55,"expression1":56,"KEYWORD_PROC":57,"DOLLAR":58,"NEWCELL_LITERAL":59,"TRUE_LITERAL":60,"FALSE_LITERAL":61,"KEYWORD_NIL":62,"STRING_LITERAL":63,"+":64,"-":65,"*":66,"div":67,"mod":68,"/":69,"OPERATOR_LESS_THAN_EQUAL":70,"exp":71,"FLOAT":72,"OPERATOR_LESS_THAN":73,"OPERATOR_EQUAL":74,"OPERATOR_GREATER_THAN_EQUAL":75,"OPERATOR_GREATER_THAN":76,"OPERATOR_NOT_EQUAL":77,"~":78,"PI":79,"OPERATOR_RECORD_GET":80,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",6:"KEYWORD_SKIP",17:"KEYWORD_END",19:"KEYWORD_LOCAL",21:"KEYWORD_IN",22:"IDENTIFIER",23:"OPERATOR_ASSIGNMENT",26:"OPERATOR_CELL_ASSIGNMENT",28:"OPERATOR_CELL_GET",31:"KEYWORD_IF",32:"KEYWORD_THEN",34:"KEYWORD_ELSE",38:"KEYWORD_CASE",39:"KEYWORD_OF",41:"LABEL",42:"(",44:")",47:"QUESTION_MARK",50:"EMBRACE",51:"UNBRACE",54:"COLON",55:"INTEGER",57:"KEYWORD_PROC",58:"DOLLAR",59:"NEWCELL_LITERAL",60:"TRUE_LITERAL",61:"FALSE_LITERAL",62:"KEYWORD_NIL",63:"STRING_LITERAL",64:"+",65:"-",66:"*",67:"div",68:"mod",69:"/",70:"OPERATOR_LESS_THAN_EQUAL",72:"FLOAT",73:"OPERATOR_LESS_THAN",74:"OPERATOR_EQUAL",75:"OPERATOR_GREATER_THAN_EQUAL",76:"OPERATOR_GREATER_THAN",77:"OPERATOR_NOT_EQUAL",78:"~",79:"PI",80:"OPERATOR_RECORD_GET"},
productions_: [0,[3,1],[3,2],[3,2],[7,0],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[10,1],[10,1],[10,1],[5,2],[16,2],[18,3],[20,1],[13,3],[24,1],[14,3],[27,1],[15,2],[8,2],[29,2],[30,3],[9,2],[33,3],[11,4],[35,2],[36,2],[37,4],[40,1],[40,4],[45,1],[45,2],[46,1],[46,2],[48,1],[48,2],[49,1],[12,4],[52,1],[43,1],[43,2],[53,3],[53,3],[25,1],[25,3],[25,7],[25,1],[25,4],[25,1],[25,1],[25,4],[25,1],[25,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,1],[56,1],[56,1],[56,3],[56,3],[56,2],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: throw new Error("Did you forget to write something?"); 
break;
case 2: var cu = new CompilationUnit(); $$[$0-1].add_semantics(_$[$0-1], "\{\}", 100); $$[$0-1].generate_semantics(); cu.close(); return cu; 
break;
case 3: var cu = new CompilationUnit(); var v = new VariableDeclarator('E'); v.add_semantics('', '', 99); v.add_semantics(_$[$0-1], "\{\}", 100); v.generate_semantics(); cu.close(); return cu;
break;
case 4: this.$=new Block(); 
break;
case 5: this.$=new Block(); 
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 6: this.$=new Block(); 
			do_skip();
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics([], $$[$0].get_semantics());
	  
break;
case 7: this.$=new Block(); 
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 8: this.$=new Block(); 
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 9: this.$=new Block(); 
			if($$[$0].isEmpty()) {				
				$$[$0-1].add_semantics('', $$[$0-1].get_value(), 2); 
			}
			else {
				$$[$0-1].add_semantics(_$[$0], $$[$0-1].get_value(), 2); 
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 10: this.$=new Block(); 
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 11: this.$=new Block(); 
			if(!$$[$0].isEmpty()) {
				this.$.add_semantics(_$[$0-1], '', 4); 
				$$[$0].add_semantics(_$[$0], '', 5);
			}
			this.$.eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());
	  
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 15: this.$=$$[$0-1]; $$[$0-1].endScope(); 
break;
case 16: this.$ = $$[$0-1]; $$[$0-1].add_semantics(_$[$0], $$[$0-1].getIdentifier(), 1);  $$[$0-1].eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());  
break;
case 17: this.$ = new VariableDeclarator($$[$0-1], cur_decl); 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = new VariableInitializer($$[$0-2], $$[$0], cur_decl); 
break;
case 21: this.$ = new CellInitializer($$[$0-2], $$[$0], cur_decl); 
break;
case 23: this.$ = get_cell_value($$[$0]); 
break;
case 24: this.$ = $$[$0-1]; $$[$0-1].endIf(); 
break;
case 25: this.$ = $$[$0-1]; $$[$0-1].set_block(_$[$0], 1);  if($$[$0-1].getCondition()) { $$[$0-1].add_semantics(_$[$0], '', 4); $$[$0-1].eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());} 
break;
case 26: this.$ = new IfThen(new Identifier($$[$0-1]), cur_decl); 
break;
case 27: $$[$0-1].endIf(); 
break;
case 28: this.$ = $$[$0-2]; $$[$0-2].set_block(_$[$0], 2); if(! $$[$0-2].getCondition()) {cur_condition[cur_id-1]=true; $$[$0-2].add_semantics(_$[$0], '', 4); $$[$0-2].eval_semantics($$[$0-2].get_semantics(), $$[$0].get_semantics());} 
break;
case 29: this.$ = $$[$0-3];  $$[$0-3].set_block(_$[$0-1], 2); if(!$$[$0-3].is_it_good()){$$[$0-3].add_semantics(_$[$0-1], '', 5);  $$[$0-3].eval_semantics($$[$0-3].get_semantics(), $$[$0-1].get_semantics());} $$[$0-3].endIf(); 
break;
case 30: this.$ = $$[$0-1]; $$[$0-1].set_block(_$[$0], 1); if($$[$0-1].is_it_good()){$$[$0-1].add_semantics(_$[$0], $$[$0-1].getIdentifier(), 5);  $$[$0-1].eval_semantics($$[$0-1].get_semantics(), $$[$0].get_semantics());} this.$.endScope(); 
break;
case 32: this.$ = new Case($$[$0-2], $$[$0], cur_decl); 
break;
case 33: this.$ = new Pattern_Identifier($$[$0]); 
break;
case 34: this.$ = new Record($$[$0-3], $$[$0-1]); 
break;
case 35: this.$ = [$$[$0]]; cur_ce = get_ce(); cur_CE=jQuery.extend(true, {}, identifiers_list); cur_proc = ""; 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); cur_ce = get_ce(); cur_CE=jQuery.extend(true, {}, identifiers_list); cur_proc = ""; 
break;
case 37: this.$ = new Identifier($$[$0]); 
break;
case 38: this.$ = new ReturnIdentifier($$[$0]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 41: this.$ = new Identifier($$[$0]); 
break;
case 42: this.$ = new ProcedureCall($$[$0-2], $$[$0-1], _$[$0-3], _$[$0], cur_decl); 
break;
case 43: this.$ = get_identifier($$[$0]); 
break;
case 44: this.$ = [$$[$0]]; 
break;
case 45: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 46: this.$ = new Record_entry($$[$0-2], new Identifier($$[$0])); 
break;
case 47: this.$ = new Record_entry($$[$0-2], new Identifier($$[$0])); 
break;
case 48: this.$ = new Expression($$[$0]); 
break;
case 49:this.$ = new Parenthesis($$[$0-1]);
break;
case 50: this.$ = new Procedure($$[$0-3], _$[$0-6], _$[$0], _$[$0-1]); this.$.eval_semantics([],$$[$0-1].get_semantics()); 
break;
case 51: this.$ = new Identifier($$[$0]); 
break;
case 52: this.$ = new Cell($$[$0-1]); 
break;
case 53: this.$ = new Parenthesis(new Expression(new Condition(new Expression(4),new Expression(4),'=='))); 
break;
case 54: this.$ = new Parenthesis(new Expression(new Condition(new Expression(4),new Expression(4),'!='))); 
break;
case 55: this.$ = new Record($$[$0-3], $$[$0-1]); 
break;
case 56: this.$ = new Keyword_nil($$[$0]);
break;
case 57: this.$ = new String_literal($$[$0]); 
break;
case 58: this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 59:this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 60:this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 61:this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 62:this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 63: this.$ = new MathExp($$[$0-2],$$[$0],$$[$0-1]); 
break;
case 64: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '<='); 
break;
case 65: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '<='); 
break;
case 66: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '<='); 
break;
case 67: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '<'); 
break;
case 68: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '<'); 
break;
case 69: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '<'); 
break;
case 70: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '=='); 
break;
case 71: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '=='); 
break;
case 72: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '=='); 
break;
case 73: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '>='); 
break;
case 74: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '>='); 
break;
case 75: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '>='); 
break;
case 76: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '>'); 
break;
case 77: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '>'); 
break;
case 78: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '>'); 
break;
case 79: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '!='); 
break;
case 80: this.$ = new Condition(new Identifier($$[$0-2]), $$[$0], '!='); 
break;
case 81: this.$ = new Condition(new Expression(Number($$[$0-2])), $$[$0], '!='); 
break;
case 82:this.$ = new Integer(-Number(yytext));
break;
case 83: this.$ = new Integer(Number(yytext)); 
break;
case 84: this.$ = new Float(Number(yytext)); 
break;
case 85:this.$ = Math.PI;
break;
case 86: this.$ = new Get_entry_record($$[$0-2], $$[$0]); 
break;
case 87: this.$ = new Get_entry_record($$[$0-2], $$[$0]); 
break;
case 88: this.$ = new Get_cell_value($$[$0]); 
break;
case 89: this.$ = new Expression(Number(yytext)); 
break;
case 90: this.$ = new Identifier($$[$0]); 
break;
case 91: this.$ = new Expression(Number(yytext)); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:[1,4],16:5,18:6,19:[1,7]},{1:[3]},{1:[2,1]},{4:[1,8]},{4:[1,9]},{17:[1,10]},{5:12,6:[1,13],7:11,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,35:24,36:30,37:32,38:[1,33],50:[1,25]},{20:34,22:[1,35]},{1:[2,2]},{1:[2,3]},{4:[2,15],6:[2,15],17:[2,15],19:[2,15],22:[2,15],28:[2,15],31:[2,15],34:[2,15],38:[2,15],50:[2,15]},{17:[2,16]},{5:12,6:[1,13],7:36,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:37,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:38,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:39,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:40,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:41,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{5:12,6:[1,13],7:42,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{17:[1,43],34:[1,44]},{17:[1,45]},{6:[2,12],17:[2,12],19:[2,12],22:[2,12],28:[2,12],31:[2,12],34:[2,12],38:[2,12],50:[2,12]},{6:[2,13],17:[2,13],19:[2,13],22:[2,13],28:[2,13],31:[2,13],34:[2,13],38:[2,13],50:[2,13]},{6:[2,14],17:[2,14],19:[2,14],22:[2,14],28:[2,14],31:[2,14],34:[2,14],38:[2,14],50:[2,14]},{34:[1,46]},{22:[1,47]},{5:12,6:[1,13],7:48,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{23:[1,49]},{23:[2,18],26:[1,50]},{22:[1,51]},{5:12,6:[1,13],7:52,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,34:[2,4],35:24,36:30,37:32,38:[1,33],50:[1,25]},{22:[1,53]},{32:[1,54]},{22:[1,55]},{21:[1,56]},{21:[2,18]},{17:[2,5],34:[2,5]},{17:[2,6],34:[2,6]},{17:[2,7],34:[2,7]},{17:[2,8],34:[2,8]},{17:[2,9],34:[2,9]},{17:[2,10],34:[2,10]},{17:[2,11],34:[2,11]},{6:[2,24],17:[2,24],19:[2,24],22:[2,24],28:[2,24],31:[2,24],34:[2,24],38:[2,24],50:[2,24]},{5:12,6:[1,13],7:57,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,35:24,36:30,37:32,38:[1,33],50:[1,25]},{6:[2,27],17:[2,27],19:[2,27],22:[2,27],28:[2,27],31:[2,27],34:[2,27],38:[2,27],50:[2,27]},{5:12,6:[1,13],7:58,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,35:24,36:30,37:32,38:[1,33],50:[1,25]},{22:[1,61],48:59,49:60},{17:[2,25],34:[2,25]},{22:[1,67],24:62,25:63,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:80,27:79,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{6:[2,23],17:[2,23],19:[2,23],22:[2,23],28:[2,23],31:[2,23],34:[2,23],38:[2,23],50:[2,23]},{34:[2,30]},{32:[1,81]},{6:[2,31],19:[2,31],22:[2,31],28:[2,31],31:[2,31],34:[2,31],38:[2,31],50:[2,31]},{39:[1,82]},{6:[2,17],17:[2,17],19:[2,17],22:[2,17],28:[2,17],31:[2,17],38:[2,17],50:[2,17]},{17:[2,28]},{17:[1,83]},{22:[1,61],49:85,51:[1,84]},{22:[2,39],51:[2,39]},{22:[2,41],51:[2,41]},{6:[2,19],17:[2,19],19:[2,19],22:[2,19],28:[2,19],31:[2,19],34:[2,19],38:[2,19],50:[2,19]},{6:[2,20],17:[2,20],19:[2,20],22:[2,20],28:[2,20],31:[2,20],34:[2,20],38:[2,20],50:[2,20],64:[1,86],65:[1,87],66:[1,88],67:[1,89],68:[1,90],69:[1,91]},{6:[2,48],17:[2,48],19:[2,48],22:[2,48],28:[2,48],31:[2,48],34:[2,48],38:[2,48],44:[2,48],50:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],69:[2,48]},{22:[1,67],25:92,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{50:[1,93]},{6:[2,51],17:[2,51],19:[2,51],22:[2,51],28:[2,51],31:[2,51],34:[2,51],38:[2,51],44:[2,51],50:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],69:[2,51],70:[1,94],73:[1,95],74:[1,96],75:[1,97],76:[1,98],77:[1,99],80:[1,100]},{59:[1,101]},{6:[2,53],17:[2,53],19:[2,53],22:[2,53],28:[2,53],31:[2,53],34:[2,53],38:[2,53],44:[2,53],50:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53]},{6:[2,54],17:[2,54],19:[2,54],22:[2,54],28:[2,54],31:[2,54],34:[2,54],38:[2,54],44:[2,54],50:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54]},{42:[1,102]},{6:[2,56],17:[2,56],19:[2,56],22:[2,56],28:[2,56],31:[2,56],34:[2,56],38:[2,56],44:[2,56],50:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56]},{6:[2,57],17:[2,57],19:[2,57],22:[2,57],28:[2,57],31:[2,57],34:[2,57],38:[2,57],44:[2,57],50:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57]},{6:[2,83],17:[2,83],19:[2,83],22:[2,83],28:[2,83],31:[2,83],34:[2,83],38:[2,83],44:[2,83],50:[2,83],64:[2,83],65:[2,83],66:[2,83],67:[2,83],68:[2,83],69:[2,83],70:[1,103],73:[1,104],74:[1,105],75:[1,106],76:[1,107],77:[1,108]},{6:[2,84],17:[2,84],19:[2,84],22:[2,84],28:[2,84],31:[2,84],34:[2,84],38:[2,84],44:[2,84],50:[2,84],64:[2,84],65:[2,84],66:[2,84],67:[2,84],68:[2,84],69:[2,84],70:[1,109],73:[1,110],74:[1,111],75:[1,112],76:[1,113],77:[1,114]},{22:[1,67],25:115,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{6:[2,85],17:[2,85],19:[2,85],22:[2,85],28:[2,85],31:[2,85],34:[2,85],38:[2,85],44:[2,85],50:[2,85],64:[2,85],65:[2,85],66:[2,85],67:[2,85],68:[2,85],69:[2,85]},{22:[1,116]},{6:[2,21],17:[2,21],19:[2,21],22:[2,21],28:[2,21],31:[2,21],34:[2,21],38:[2,21],50:[2,21]},{6:[2,22],17:[2,22],19:[2,22],22:[2,22],28:[2,22],31:[2,22],34:[2,22],38:[2,22],50:[2,22],64:[1,86],65:[1,87],66:[1,88],67:[1,89],68:[1,90],69:[1,91]},{6:[2,26],17:[2,26],19:[2,26],22:[2,26],28:[2,26],31:[2,26],34:[2,26],38:[2,26],50:[2,26]},{22:[1,118],40:117,41:[1,119]},{6:[2,29],17:[2,29],19:[2,29],22:[2,29],28:[2,29],31:[2,29],34:[2,29],38:[2,29],50:[2,29]},{6:[2,42],17:[2,42],19:[2,42],22:[2,42],28:[2,42],31:[2,42],34:[2,42],38:[2,42],50:[2,42]},{22:[2,40],51:[2,40]},{22:[1,67],25:120,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:121,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:122,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:123,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:124,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{22:[1,67],25:125,28:[1,78],41:[1,71],42:[1,65],50:[1,68],55:[1,74],56:64,57:[1,66],60:[1,69],61:[1,70],62:[1,72],63:[1,73],72:[1,75],78:[1,76],79:[1,77]},{44:[1,126],64:[1,86],65:[1,87],66:[1,88],67:[1,89],68:[1,90],69:[1,91]},{58:[1,127]},{22:[1,130],55:[1,129],71:128,72:[1,131]},{22:[1,130],55:[1,129],71:132,72:[1,131]},{22:[1,130],55:[1,129],71:133,72:[1,131]},{22:[1,130],55:[1,129],71:134,72:[1,131]},{22:[1,130],55:[1,129],71:135,72:[1,131]},{22:[1,130],55:[1,129],71:136,72:[1,131]},{41:[1,137],55:[1,138]},{22:[1,139]},{41:[1,142],43:140,53:141,55:[1,143]},{22:[1,130],55:[1,129],71:144,72:[1,131]},{22:[1,130],55:[1,129],71:145,72:[1,131]},{22:[1,130],55:[1,129],71:146,72:[1,131]},{22:[1,130],55:[1,129],71:147,72:[1,131]},{22:[1,130],55:[1,129],71:148,72:[1,131]},{22:[1,130],55:[1,129],71:149,72:[1,131]},{22:[1,130],55:[1,129],71:150,72:[1,131]},{22:[1,130],55:[1,129],71:151,72:[1,131]},{22:[1,130],55:[1,129],71:152,72:[1,131]},{22:[1,130],55:[1,129],71:153,72:[1,131]},{22:[1,130],55:[1,129],71:154,72:[1,131]},{22:[1,130],55:[1,129],71:155,72:[1,131]},{6:[2,82],17:[2,82],19:[2,82],22:[2,82],28:[2,82],31:[2,82],34:[2,82],38:[2,82],44:[2,82],50:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[1,90],69:[2,82]},{6:[2,88],17:[2,88],19:[2,88],22:[2,88],28:[2,88],31:[2,88],34:[2,88],38:[2,88],44:[2,88],50:[2,88],64:[2,88],65:[2,88],66:[2,88],67:[2,88],68:[2,88],69:[2,88]},{32:[2,32]},{32:[2,33]},{42:[1,156]},{6:[2,58],17:[2,58],19:[2,58],22:[2,58],28:[2,58],31:[2,58],34:[2,58],38:[2,58],44:[2,58],50:[2,58],64:[2,58],65:[2,58],66:[1,88],67:[1,89],68:[1,90],69:[1,91]},{6:[2,59],17:[2,59],19:[2,59],22:[2,59],28:[2,59],31:[2,59],34:[2,59],38:[2,59],44:[2,59],50:[2,59],64:[2,59],65:[2,59],66:[1,88],67:[1,89],68:[1,90],69:[1,91]},{6:[2,60],17:[2,60],19:[2,60],22:[2,60],28:[2,60],31:[2,60],34:[2,60],38:[2,60],44:[2,60],50:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[1,90],69:[2,60]},{6:[2,61],17:[2,61],19:[2,61],22:[2,61],28:[2,61],31:[2,61],34:[2,61],38:[2,61],44:[2,61],50:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[1,90],69:[2,61]},{6:[2,62],17:[2,62],19:[2,62],22:[2,62],28:[2,62],31:[2,62],34:[2,62],38:[2,62],44:[2,62],50:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[1,90],69:[2,62]},{6:[2,63],17:[2,63],19:[2,63],22:[2,63],28:[2,63],31:[2,63],34:[2,63],38:[2,63],44:[2,63],50:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[1,90],69:[2,63]},{6:[2,49],17:[2,49],19:[2,49],22:[2,49],28:[2,49],31:[2,49],34:[2,49],38:[2,49],44:[2,49],50:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],69:[2,49]},{22:[1,159],45:157,46:158,47:[1,160]},{6:[2,65],17:[2,65],19:[2,65],22:[2,65],28:[2,65],31:[2,65],34:[2,65],38:[2,65],44:[2,65],50:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[2,65],68:[2,65],69:[2,65]},{6:[2,89],17:[2,89],19:[2,89],22:[2,89],28:[2,89],31:[2,89],34:[2,89],38:[2,89],44:[2,89],50:[2,89],64:[2,89],65:[2,89],66:[2,89],67:[2,89],68:[2,89],69:[2,89]},{6:[2,90],17:[2,90],19:[2,90],22:[2,90],28:[2,90],31:[2,90],34:[2,90],38:[2,90],44:[2,90],50:[2,90],64:[2,90],65:[2,90],66:[2,90],67:[2,90],68:[2,90],69:[2,90]},{6:[2,91],17:[2,91],19:[2,91],22:[2,91],28:[2,91],31:[2,91],34:[2,91],38:[2,91],44:[2,91],50:[2,91],64:[2,91],65:[2,91],66:[2,91],67:[2,91],68:[2,91],69:[2,91]},{6:[2,68],17:[2,68],19:[2,68],22:[2,68],28:[2,68],31:[2,68],34:[2,68],38:[2,68],44:[2,68],50:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],68:[2,68],69:[2,68]},{6:[2,71],17:[2,71],19:[2,71],22:[2,71],28:[2,71],31:[2,71],34:[2,71],38:[2,71],44:[2,71],50:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71],69:[2,71]},{6:[2,74],17:[2,74],19:[2,74],22:[2,74],28:[2,74],31:[2,74],34:[2,74],38:[2,74],44:[2,74],50:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],68:[2,74],69:[2,74]},{6:[2,77],17:[2,77],19:[2,77],22:[2,77],28:[2,77],31:[2,77],34:[2,77],38:[2,77],44:[2,77],50:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],69:[2,77]},{6:[2,80],17:[2,80],19:[2,80],22:[2,80],28:[2,80],31:[2,80],34:[2,80],38:[2,80],44:[2,80],50:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80],69:[2,80]},{6:[2,86],17:[2,86],19:[2,86],22:[2,86],28:[2,86],31:[2,86],34:[2,86],38:[2,86],44:[2,86],50:[2,86],64:[2,86],65:[2,86],66:[2,86],67:[2,86],68:[2,86],69:[2,86]},{6:[2,87],17:[2,87],19:[2,87],22:[2,87],28:[2,87],31:[2,87],34:[2,87],38:[2,87],44:[2,87],50:[2,87],64:[2,87],65:[2,87],66:[2,87],67:[2,87],68:[2,87],69:[2,87]},{51:[1,161]},{41:[1,142],44:[1,162],53:163,55:[1,143]},{41:[2,44],44:[2,44],55:[2,44]},{54:[1,164]},{54:[1,165]},{6:[2,64],17:[2,64],19:[2,64],22:[2,64],28:[2,64],31:[2,64],34:[2,64],38:[2,64],44:[2,64],50:[2,64],64:[2,64],65:[2,64],66:[2,64],67:[2,64],68:[2,64],69:[2,64]},{6:[2,67],17:[2,67],19:[2,67],22:[2,67],28:[2,67],31:[2,67],34:[2,67],38:[2,67],44:[2,67],50:[2,67],64:[2,67],65:[2,67],66:[2,67],67:[2,67],68:[2,67],69:[2,67]},{6:[2,70],17:[2,70],19:[2,70],22:[2,70],28:[2,70],31:[2,70],34:[2,70],38:[2,70],44:[2,70],50:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70]},{6:[2,73],17:[2,73],19:[2,73],22:[2,73],28:[2,73],31:[2,73],34:[2,73],38:[2,73],44:[2,73],50:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73],69:[2,73]},{6:[2,76],17:[2,76],19:[2,76],22:[2,76],28:[2,76],31:[2,76],34:[2,76],38:[2,76],44:[2,76],50:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],69:[2,76]},{6:[2,79],17:[2,79],19:[2,79],22:[2,79],28:[2,79],31:[2,79],34:[2,79],38:[2,79],44:[2,79],50:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],68:[2,79],69:[2,79]},{6:[2,66],17:[2,66],19:[2,66],22:[2,66],28:[2,66],31:[2,66],34:[2,66],38:[2,66],44:[2,66],50:[2,66],64:[2,66],65:[2,66],66:[2,66],67:[2,66],68:[2,66],69:[2,66]},{6:[2,69],17:[2,69],19:[2,69],22:[2,69],28:[2,69],31:[2,69],34:[2,69],38:[2,69],44:[2,69],50:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69]},{6:[2,72],17:[2,72],19:[2,72],22:[2,72],28:[2,72],31:[2,72],34:[2,72],38:[2,72],44:[2,72],50:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72],69:[2,72]},{6:[2,75],17:[2,75],19:[2,75],22:[2,75],28:[2,75],31:[2,75],34:[2,75],38:[2,75],44:[2,75],50:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],69:[2,75]},{6:[2,78],17:[2,78],19:[2,78],22:[2,78],28:[2,78],31:[2,78],34:[2,78],38:[2,78],44:[2,78],50:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],68:[2,78],69:[2,78]},{6:[2,81],17:[2,81],19:[2,81],22:[2,81],28:[2,81],31:[2,81],34:[2,81],38:[2,81],44:[2,81],50:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],68:[2,81],69:[2,81]},{41:[1,142],43:166,53:141,55:[1,143]},{22:[1,159],46:168,47:[1,160],51:[1,167]},{22:[2,35],47:[2,35],51:[2,35]},{22:[2,37],47:[2,37],51:[2,37]},{22:[1,169]},{6:[2,52],17:[2,52],19:[2,52],22:[2,52],28:[2,52],31:[2,52],34:[2,52],38:[2,52],44:[2,52],50:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],69:[2,52]},{6:[2,55],17:[2,55],19:[2,55],22:[2,55],28:[2,55],31:[2,55],34:[2,55],38:[2,55],44:[2,55],50:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55]},{41:[2,45],44:[2,45],55:[2,45]},{22:[1,170]},{22:[1,171]},{41:[1,142],44:[1,172],53:163,55:[1,143]},{5:12,6:[1,13],7:173,8:14,9:15,10:16,11:17,12:18,13:21,14:22,15:23,16:5,17:[2,4],18:6,19:[1,7],20:27,22:[1,28],28:[1,29],29:19,30:26,31:[1,31],33:20,35:24,36:30,37:32,38:[1,33],50:[1,25]},{22:[2,36],47:[2,36],51:[2,36]},{22:[2,38],47:[2,38],51:[2,38]},{41:[2,46],44:[2,46],55:[2,46]},{41:[2,47],44:[2,47],55:[2,47]},{32:[2,34]},{17:[1,174]},{6:[2,50],17:[2,50],19:[2,50],22:[2,50],28:[2,50],31:[2,50],34:[2,50],38:[2,50],44:[2,50],50:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],69:[2,50]}],
defaultActions: {2:[2,1],8:[2,2],9:[2,3],11:[2,16],35:[2,18],52:[2,30],57:[2,28],117:[2,32],118:[2,33],172:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 78
break;
case 3:return 50;
break;
case 4:return 51;
break;
case 5:return 60;
break;
case 6:return 61;
break;
case 7:return 59;
break;
case 8:return 70;
break;
case 9:return 73;
break;
case 10:return 74;
break;
case 11:return 75;
break;
case 12:return 76;
break;
case 13:return 77;
break;
case 14:return 66
break;
case 15:return "div"
break;
case 16:return "mod"
break;
case 17:return 65
break;
case 18:return 64
break;
case 19:return 69
break;
case 20:return 42
break;
case 21:return 44
break;
case 22:return 58;
break;
case 23:return 47;
break;
case 24:return 23
break;
case 25:return 26
break;
case 26:return 54;
break;
case 27:return 28;
break;
case 28:return 80;
break;
case 29:return 6;
break;
case 30:return 62;
break;
case 31:return 19
break;
case 32:return 21
break;
case 33:return 17
break;
case 34:return 31;
break;
case 35:return 32;
break;
case 36:return 34;
break;
case 37:return 38;
break;
case 38:return 39;
break;
case 39:return 57;
break;
case 40:return 'OPERATOR_BRACE';
break;
case 41:return 72
break;
case 42:return 55
break;
case 43:return 22
break;
case 44:return 63;
break;
case 45:return 63;
break;
case 46:return 41
break;
case 47:return 4
break;
}
},
rules: [/^(?:%.*)/,/^(?:\s+)/,/^(?:~)/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:false\b)/,/^(?:NewCell\b)/,/^(?:=<)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:\\=)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:-)/,/^(?:\+)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:\$)/,/^(?:\?)/,/^(?:=)/,/^(?::=)/,/^(?::)/,/^(?:@)/,/^(?:\.)/,/^(?:skip\b)/,/^(?:nil\b)/,/^(?:local\b)/,/^(?:in\b)/,/^(?:end\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:of\b)/,/^(?:proc\b)/,/^(?:\[\])/,/^(?:[0-9]+["."]{1}[0-9]+)/,/^(?:[0-9]+([0-9]+)?\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:"")/,/^(?:"([^"]|{BSL})*")/,/^(?:[']*[a-z0-9\W][a-zA-Z0-9]*[']*)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oz;
exports.Parser = oz.Parser;
exports.parse = function () { return oz.parse.apply(oz, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/**
 * AST nodes for constructing an Abstract Syntax Tree by the parser.
 *
 */
 
var identifiers_list = new Array();
var cells_list = new Array();
var identifiers_nbr = {};
var cur_condition = {};
cur_condition[0] = true;
var proc = new Array();
var CE = new Array();
var cur_proc = "";
var cur_id = 1;					// Identifier of the current IF THEN condition
var state_decl = new Array();
var cur_decl = 0;
var infinite_loop_avoid = new Array();
var return_identifier = new Array();
var param_list = new Array();

var ASTNode = function ASTNode() {
   this.type = 'ASTNode';
   this.children = [];

   this.getType = function()
   {
       return this.type;
   }
};

ASTNode.prototype.getType = function() {
	return this.type;
};

ASTNode.prototype.appendChild = function(node) {
	this.children.push(node);
	
	return node;
};

ASTNode.prototype.toString = function() {
	var str = "ASTNode of type "+this.type+" with "+this.children.length+" children";
	
	return str;
};

/**
 * Create a node for a compilation unit, the root of a Glass Cat AST.
 */

var CompilationUnit = function CompilationUnit() {
    this.type = 'CompilationUnit';
    this.children = [];
};

CompilationUnit.prototype.close = function () {
	identifiers_list = {};
	identifiers_nbr = {};
	cur_condition = {};
	cur_condition[0] = true;
	cur_id = 1;	
}

/*** -------------- NODES -------------- ***/

/* Block */

var Block = function() {
	this.type = 'Block';
	this.semantic = new Array();
};

Block.prototype.isEmpty = function() {
	return this.semantic.length==0;
}

Block.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	
	
	
	
	
};

Block.prototype.eval_semantics = function(left, right) {
	var sem = [];
	sem = this.semantic.concat.apply(sem, this.semantic);
	
	var right_2 = [];
	right_2 = right_2.concat.apply(right_2, right);
	
	var left_2 = [];
	left_2 = left_2.concat.apply(left_2, left);
	
	this.semantic = new Array();
	this.semantic.push(right_2.concat(left_2).concat(sem));
	
};

Block.prototype.get_semantics = function() {
	return this.semantic;
};

function do_skip() {
	cur_proc+="do_skip(); this.add_semantics('skip','',99);"
}


/* Variables */

var VariableDeclarator = function(identifier, cur_decl_local) {
	
	this.type = 'VariableDeclarator';
	this.semantic = new Array();
	this.decl_nbr = cur_decl_local;
	cur_decl++;
	
	if(identifier.indexOf("_")>-1) {
		throw new Error("Identifiers <code>"+identifier+"</code> can't contain underscore.")
	}
	
	// must be declared
	if(typeof identifiers_nbr[identifier]=='undefined') {
		
		identifiers_nbr[identifier] = 0;
		this.identifier = identifier;
	}
	else {
		
		identifiers_nbr[identifier]+=1;
		new_value = identifiers_nbr[identifier];
		this.identifier = identifier+'_'+new_value;
		
	}
	identifiers_list[this.identifier]='';
	
	cur_proc+="new VariableDeclarator('"+identifier+"',"+this.decl_nbr+");";
	
	if(typeof state_decl[this.decl_nbr] != 'undefined' && state_decl[this.decl_nbr].state_loc!="") {
		var prev = new Object();
		prev.first_column = state_decl[this.decl_nbr].state_loc.first_column;
		prev.last_column = state_decl[this.decl_nbr].state_loc.last_column;
		prev.first_line = (state_decl[this.decl_nbr].state_loc.first_line)-1;
		prev.last_line = (state_decl[this.decl_nbr].state_loc.last_line)+1;
		//cur_proc+="this.add_semantics("+JSON.stringify(prev)+",'', 1);";
		cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+"', 1);";
	}
	
};

/*function do_end_var(id) {
	// supprimer la variable du store
	// decrease le nbr identifiers
	delete identifiers_list[get_last(id)];
	identifiers_nbr[get_last(id).substring(0,get_last(id).indexOf('_'))] -=1;
	
	cur_proc+="do_end_var(id);";
}*/

VariableDeclarator.prototype.getIdentifier = function() {
	if(typeof this.identifier=='undefined') {
		return '';
	}
	return this.identifier.toLowerCase();
};

VariableDeclarator.prototype.endScope = function() {
	delete identifiers_list[this.identifier];
	
	//do_end_var(this.identifier);
};

VariableDeclarator.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	state_decl[this.decl_nbr] = sem;
	
	
	
	
	
	
	
};

VariableDeclarator.prototype.get_semantics = function() {
	return this.semantic;
};

VariableDeclarator.prototype.eval_semantics = function(left, right) {
	var sem = [];
	sem = this.semantic.concat.apply(sem, this.semantic);
	
	var right_2 = [];
	right_2 = right_2.concat.apply(right_2, right);
	
	var left_2 = [];
	left_2 = left_2.concat.apply(left_2, left);
	
	this.semantic = new Array();
	this.semantic.push(right_2.concat(left_2));
	
};


VariableDeclarator.prototype.generate_semantics = function() {
	
	
	var sem = [];
	sem = sem.concat.apply(sem, this.semantic);
	a = JSON.stringify(sem);a = a.split("</p>").join("\n");
	a = a.split("<p>").join("");
	cur_sem=a;
	
	
	
	var sem_length = sem.length;
	var state_loc;
	var stack;
	var type;
	// this.semantic = [state_loc, stack, type]
	
	var lines = document.getElementById("code_"+thevalueoftheexeclick_2).value.split('\n');
	var state;
	var tmp;
	
	for(var i=0; i<sem_length; i++) {
		state = "";
		state_loc = sem[i].state_loc;
		stack = sem[i].stack;
		type = sem[i].type;
		
		
		if(state_loc != '') {
			for(var j=state_loc.first_line-1; j<state_loc.last_line; j++) {
				tmp = lines[j].replace("<","&lt");
				tmp = tmp.replace(">","&gt");
				state += ("<p>"+tmp.split(' ').join("&nbsp")+"</p>");
			}
		}
		
		
		if(cnt_exe == 0) {
			states[cnt_exe] = '<fieldset id="state_'+cnt_exe+'" class="hero-unit"><legend>'+(sem_length-cnt_exe)+'</legend><p>DONE !</fieldset>';
		}
		else {
			states[cnt_exe] = '<fieldset id="state_'+cnt_exe+'" class="hero-unit"><legend>'+(sem_length-cnt_exe)+'</legend><div class="scrollable">'+state+'</div></fieldset>';
		}
				
		stacks[cnt_exe] = [stack, type];
		//
		cnt_exe++;
	}
}

/*** VARIABLE INITIALIZER ***/

function deep_value(value) {
	var ret = value;
	while(typeof ret.get_value() == 'object' && ret.type != 'Condition') {
		ret = ret.get_value();
	}
	return ret;
}

var VariableInitializer = function(identifier, value, cur_decl_local) {
	this.type = 'VariableInitializer';
	this.identifier = identifier;
	this.value = value;
	this.semantic = new Array();
	this.is_cell = false;
	
	this.decl_nbr = cur_decl_local;
	cur_decl++;
	
	if(identifiers_nbr[identifier]>0) {
		this.identifier = get_last(identifier);
	}
	
	if(value.get_type() == 'Cell') {
		this.is_cell = true;
	}
	
	else if(value.get_type() == 'Procedure') {
		value.set_id(identifier);
	}

	if(identifiers_list[this.identifier]=='') {
		identifiers_list[this.identifier] = this.value;
		
	}
	else if(typeof identifiers_list[this.identifier]=='undefined') {
		
		throw new Error("Identifier <code>"+this.identifier+"</code> is not declared.");
	}
	else {
			
		a = cur_proc.indexOf("else");
		if(a>-1) {
			b = cur_proc.substring(a,cur_proc.length);
			if(b.indexOf("new VariableInitializer('"+this.identifier+"'")>-1) {
				throw new Error("Identifier <code>"+this.identifier+"</code> has already a value.");	
			}
		} else if(return_identifier.indexOf(this.identifier) == -1 ) {
			throw new Error("Identifier <code>"+this.identifier+"</code> has already a value.");	
		} 
	}
	
	if(value.get_type() == 'Identifier') {
		
		cur_proc+="new VariableInitializer('"+identifier+"', new "+value.get_type()+"('"+value.get_id()+"'),"+this.decl_nbr+");";
		if(typeof value.get_value() != 'undefined' && value.get_value() != '' && typeof state_decl[this.decl_nbr] != 'undefined') {
			cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+identifiers_list[get_last(value.get_id())].get_value().value+"', 2);"
		}
	}
	else {
		dp_value = deep_value(value);
		if(dp_value.get_type() == 'Condition' && value.get_type() != "Parenthesis") {
			throw new Error("Identifier <code>"+this.identifier+"</code> is a condition, it requires parenthesis.");
		}
		if((value.get_type() == 'Expression' || value.get_type() == "Parenthesis")  && typeof value.get_value()=='object') {
			
			if(value.get_value().get_type() == 'MathExp' || dp_value.get_type() == 'Condition' || dp_value.get_type() == 'Get_entry_record' || dp_value.type == 'Integer' || dp_value.type == 'Float') {
				
				
				cur_proc+="new VariableInitializer('"+identifier+"', new "+value.get_type()+"("+value.get_value().get_proc_ret()+"),"+this.decl_nbr+");";
						
				
				if(typeof value.get_value().get_value() != 'undefined' && typeof state_decl[this.decl_nbr] != 'undefined') {
					if(dp_value.get_type() == 'Condition') {
						cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+dp_value.get_value()+"', 2);";
					}
					else {
						cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+value.get_value().get_value()+"', 2);";
					}	
				}
			}			
		}
		else if(value.get_type() == 'Cell') {
			cur_proc+="new VariableInitializer('"+identifier+"', new "+value.get_type()+"('"+value.get_value().get_id()+"'),"+this.decl_nbr+");";
			if(typeof value.get_value() != 'undefined' && typeof state_decl[this.decl_nbr] != 'undefined') {
				cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+value.get_id()+"', 2);";
			}
		}
		else if(value.get_type() == 'Record') {
			cur_proc+="new VariableInitializer('"+identifier+"', new "+value.get_type()+"("+value.get_proc_ret()+"),"+this.decl_nbr+");";
			if(typeof value.get_value() != 'undefined' && typeof state_decl[this.decl_nbr] != 'undefined') {
				cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+value.get_value()+"', 2);";
			}
		}
		else {
			var a = "'"+value.get_value()+"'";
			if(typeof value.get_value() == 'number') {
				a = value.get_value();
			}
					
			cur_proc+="new VariableInitializer('"+identifier+"', new "+value.get_type()+"("+a+"),"+this.decl_nbr+");";
			if(typeof value.get_value() != 'undefined' && typeof state_decl[this.decl_nbr] != 'undefined') {
				cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+this.identifier.toLowerCase()+" = "+value.get_value()+"', 2);";
			}
		}	
		
	}
	
	
};

VariableInitializer.prototype.get_value = function() {
	var val = this.value;
	
	if(typeof this.identifier=='undefined') {
		return '';
	}
	
	while(typeof val=='object') {
		if(val.get_type() == 'Cell') {
			val = val.get_id();
		}
		else {
			val = val.get_value();
		}		
	}
	
	
	
	return this.identifier.toLowerCase()+" = "+val;
};

VariableInitializer.prototype.getIdentifier = function() {
	if(typeof this.identifier=='undefined') {
		return '';
	}
	return this.identifier.toLowerCase();
};

VariableInitializer.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	state_decl[this.decl_nbr] = sem;
	
	
	
	
	
};

VariableInitializer.prototype.get_semantics = function() {
	return this.semantic;
};


function set_identifier(identifier) {
	if(typeof identifiers_list[identifier]!='undefined') {
		return identifiers_list[identifier];
	}
	else {
		
		return '';
	}
}

function get_identifier(identifier) {
	if(typeof identifiers_list[identifier]!='undefined') {
		return identifiers_list[identifier];
	}
	else {
		
		return '';
	}
}

var GetIdentifierValue = function(identifier) {
	var id = identifier;
	
	/*if(identifiers_list[id]=='') {
		// identifier not linked
		AbortJavaScript();
	}
	else */if(typeof identifiers_list[id]!='undefined') {
		return identifiers_list[id];
	}
	else {
		
	}
};


/*** CELL INITIALIZER ***/

function update(list, value) {
	var index = is_value_in_array(cells_list, value[0]);
	
	if(index>-1) {
		list.splice(index, 1, value);		
	}
	else {
		list.store.push(value);
	}
}

var CellInitializer = function(identifier, value, cur_decl_local) {
	this.type = 'CellInitializer';
	this.identifier = identifier;
	this.value = value;
	this.semantic = new Array();
	this.is_cell = false;
	
	this.decl_nbr = cur_decl_local;
	cur_decl++;
	
	if(identifiers_nbr[identifier]>0) {
		this.identifier = identifier+'_'+identifiers_nbr[identifier];
	}
	
	if(value.get_type() == 'Cell') {
		this.is_cell = true;
	}
	
	cells_list.push([identifiers_list[this.identifier].get_id(), this.value]);
	
	
	if(typeof identifiers_list[this.identifier]!='undefined') {
		identifiers_list[this.identifier].update(this.value);
		
	}
	else { 
		
	}
	
	if(value.get_type() == 'Identifier') {
		
		cur_proc+="new CellInitializer('"+identifier+"', new "+value.get_type()+"('"+value.get_id()+"'),"+this.decl_nbr+");";
		if(typeof value.get_value()!= 'undefined' && typeof state_decl[this.decl_nbr] != 'undefined') {
			cur_proc+="this.add_semantics("+JSON.stringify(state_decl[this.decl_nbr].state_loc)+",'"+identifiers_list[this.identifier].get_id()+" := "+value.get_id()+"', 2);"
		}
	}	
		
	
};

CellInitializer.prototype.get_value = function() {
	var val = this.value;
	
	if(typeof this.identifier=='undefined') {
		return '';
	}
	
	while(typeof val=='object') {
		if(val.get_type() == 'Cell') {
			val = val.get_id();
		}
		else {
			val = val.get_value();
		}		
	}
	
	
	
	
	return identifiers_list[this.identifier.toUpperCase()].get_id()+" := "+this.value.get_id();
};

CellInitializer.prototype.getIdentifier = function() {
	if(typeof this.identifier=='undefined') {
		return '';
	}
	return this.identifier.toLowerCase();
};

CellInitializer.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	state_decl[this.decl_nbr] = sem;
	
	
	
	
	
};

CellInitializer.prototype.get_semantics = function() {
	return this.semantic;
};


//regarder si l'id appartient a la liste des cell et si oui changer la valeur
function set_cell_value(id, value) {
	
	if(cells_list.indexOf(id) !=-1) {
		identifiers_list[id] = value;
	} 
	
}

var Get_cell_value = function(id) {
	this.type = 'Get_cell_value';
	var id_2 = id;
	if(identifiers_nbr[id]>0) {
		id_2 = id+'_'+identifiers_nbr[id];
	}
	this.id = id_2;
	id_2 = id_2.toLowerCase();
	
	
	var index = is_value_in_array(cells_list,identifiers_list[this.id].get_id());
	
	if(index>-1) {
		
		this.value = identifiers_list[get_last_init(cells_list[index][1].get_id())];
	}
};

Get_cell_value.prototype.get_type = function() {
	return this.type;
};

Get_cell_value.prototype.get_id = function() {
	return this.id;
};

Get_cell_value.prototype.get_value = function() {
	return this.value;
};

Get_cell_value.prototype.get_proc_ret = function() {
	return "new Get_cell_value('"+this.id+"')";
};

/*** CONDITION ***/

var Condition = function(left, right, operator) {
	this.l = left;
	this.r = right;
	this.operator = operator;
	this.type = "Condition";
};

Condition.prototype.get_type = function() {
	return this.type;
};

Condition.prototype.get_proc_ret = function() {
	var a = this.l.get_value();
	var b = this.r.get_value();
	if(this.l.get_type() == 'Identifier') {
		a = "'"+this.l.get_id()+"'";
	}
	if(this.r.get_type() == 'Identifier') {
		b = "'"+this.r.get_id()+"'";
	}
	return "new Condition(new "+this.l.get_type()+"(get_last_if("+a+")),new "+this.r.get_type()+"(get_last_if("+b+")),'"+this.operator+"')";
};

Condition.prototype.get_value = function() {
	if(typeof this.l.get_value() == 'undefined' || typeof this.r.get_value() == 'undefined') {		
		return 'undefined';
	}
	var left = this.l.get_value();
	var right = this.r.get_value();
	
	if(this.l.get_type() == 'Identifier' && typeof identifiers_list[get_last(this.l.get_id())] != 'undefined') {
		left = left.value;
	}
	else if(typeof left != 'number' && left.get_value() != 'undefined' && left.get_type() == 'Get_cell_value') {
		left = left.get_value().get_value();
		
	}
	if(this.r.get_type() == 'Identifier' && typeof identifiers_list[get_last(this.r.get_id())] != 'undefined') {
		right = right.value;
	}
	else if(typeof right != 'number' && typeof right.get_value() != 'undefined' && right.get_type() == 'Get_cell_value') {
		right = right.get_value().get_value();
		
	}
	switch(this.operator) {
	case "<=":
		this.value = left<= right;
		break;
	case "<":
		this.value = left < right;
		break;
	case "==":
		this.value = left == right;
		break;
	case ">=":
		this.value = left >= right;
		break;
	case ">":
		this.value = left > right;
		break;
	case "!=":
		this.value = left != right;
		break;
	}
	return this.value;
};


/*** IF THEN ***/

var IfThen = function(condition, cur_decl_local) {
	var dp_value = deep_value(condition);
	if(typeof dp_value.get_type() != 'undefined' && dp_value.get_type() != 'Condition') {
		throw new Error("In <code>if</code>: The identifier <code>"+condition.get_id()+"</code> must be a condition.");
	}
	
	this.type = 'IfThen';
	this.id = cur_id;
	if(condition.get_value() != "") {
		cur_condition[this.id] = condition.get_value().get_value().get_value();
	}
	
	this.condition = condition.get_value();
	cur_id++;
	this.semantic = new Array();
	this.cur_decl = cur_decl_local;
	cur_decl++;
	this.cur_decl_else = cur_decl_local+1;
	cur_decl++;
	
	cur_proc += "new IfThen(new Identifier('"+condition.get_id()+"'), "+cur_decl_local+");";
	if(typeof this.condition.value.value == 'undefined') {
		cur_proc += "if(identifiers_list[get_last_if('"+condition.get_id()+"')].get_value().get_value().get_value()){";	
	}
	else {
		cur_proc += "if("+this.condition.value.value+"){";
	}
	
	if(typeof state_decl[this.cur_decl] != 'undefined') {
		cur_proc += "this.add_semantics("+JSON.stringify(state_decl[this.cur_decl])+",'',6);";
	}
};

IfThen.prototype.getCondition = function() {
	if(this.condition == "") {
		return true;
	}
	if(this.condition.get_value().get_value() != 'undefined') {
		return this.condition.get_value().get_value();
	}
	return this.condition.get_value();
};

IfThen.prototype.set_block = function(state_loc, type) {
	if(type == 1) {
		state_decl[this.cur_decl] = state_loc;
		new Gen_cur_proc_if(this.cur_decl, type);
	}
	else {
		state_decl[this.cur_decl_else] = state_loc;
	}
};

var Gen_cur_proc_if = function(cur_decl, type) {
	cur_proc += "new Gen_cur_proc_if("+cur_decl+","+type+");";

	if(typeof state_decl[cur_decl+type-1] != 'undefined') {
		//cur_proc += "this.add_semantics("+JSON.stringify(state_decl[cur_decl+type-1])+",'',6);";
	}
	if(type == 1) {
		cur_proc += "do_end();}else{"; //TODO problem with the number of } (prob: at every step, increase step)
		cur_proc += "new Gen_cur_proc_if("+cur_decl+",1);";
		if(typeof state_decl[cur_decl+1] != 'undefined') {
			cur_proc += "this.add_semantics("+JSON.stringify(state_decl[cur_decl+1])+",'',6);";
		}
	}
};

function do_end() {
	cur_proc += "do_end();}"
}

IfThen.prototype.endIf = function() {
	cur_condition[this.id] = true;
	
	do_end();
};

IfThen.prototype.set_state_loc = function(state_loc) {
	this.state_loc = state_loc;
};

IfThen.prototype.get_state_loc = function() {
	return this.state_loc;
};

IfThen.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	
	
	
	
	
};

IfThen.prototype.get_semantics = function() {
	return this.semantic;
};

IfThen.prototype.eval_semantics = function(left, right) {
	var right_2 = [];
	right_2 = right_2.concat.apply(right_2, right);
	
	var left_2 = [];
	left_2 = left_2.concat.apply(left_2, left);
	
	this.semantic = new Array();
	this.semantic.push(right_2.concat(left_2));
	
};

/*** CASE ***/

var Gen_cur_proc_case = function(cur_decl, type) {
	cur_proc += "new Gen_cur_proc_case("+cur_decl+","+type+");";

	if(typeof state_decl[cur_decl+type-1] != 'undefined') {
		//cur_proc += "this.add_semantics("+JSON.stringify(state_decl[cur_decl+type-1])+",'',7);";
	}
	if(type == 1) {
		cur_proc += "do_end();}else{"; 
		cur_proc += "new Gen_cur_proc_case("+cur_decl+",1);";
		if(typeof state_decl[cur_decl+1] != 'undefined') {
			cur_proc += "this.add_semantics("+JSON.stringify(state_decl[cur_decl+1])+",'',7);";
		}
	}
};


// input: an identifier and a pattern
function is_good_pattern(id, pattern) {
	var record = identifiers_list[get_last(id)];
	
	
	if(record.type == 'Expression' && pattern.type == 'Identifier') {
		var identifier = pattern.identifier;
		if(typeof identifiers_list[identifier]=='undefined' || identifiers_list[identifier]=="") {			
			
			identifiers_nbr[identifier] = 0;
		}
		else {
			
			identifiers_nbr[identifier]+=1;
			new_value = identifiers_nbr[identifier];
			identifier = identifier+'_'+new_value;
			
		}
		
		identifiers_list[identifier] = identifiers_list[get_last(id)];
		return true;
	}
	
	if(record.label != pattern.label) {
		return false;
	}
	if(record.entries.length != pattern.entries.length) {
		return false;
	}
	
	for(var i=0; i<record.entries.length ; i++) {
		if(record.entries[i].feature != pattern.entries[i].feature) {
			return false
		}
		else {
			var identifier = pattern.entries[i].id.id;
			if(typeof identifiers_list[identifier]=='undefined') {			
				
				identifiers_nbr[identifier] = 0;
			}
			else {
				
				identifiers_nbr[identifier]+=1;
				new_value = identifiers_nbr[identifier];
				identifier = identifier+'_'+new_value;
				
			}
			pattern.entries[i].id = record.entries[i].id;
			identifiers_list[identifier] = record.entries[i].id;
		}
	}
	return true;
}

function generate_identifier(id, pattern) {	
	if(typeof identifiers_list[get_last(id)] != 'undefined') {
		if(pattern.type == 'Identifier' && identifiers_list[get_last(id)].type != 'Record') {
			if(identifiers_list[get_last(id)].value.type == 'Integer' || identifiers_list[get_last(id)].value.type == 'Float') {
				return [pattern.identifier + " = " + identifiers_list[get_last(id)].value.value];
			}
		}
		
		if(pattern.type == 'Record' && identifiers_list[get_last(id)].type == 'Record') {
			var record = identifiers_list[get_last(id)];
			var ret = [];
			for(var i=0; i<pattern.entries.length; i++) {
				if(typeof record.entries[i].id.value == 'object') {
					ret.push(pattern.entries[i].id.id + " = " + record.entries[i].id.value.value);
				}
				else {
					ret.push(pattern.entries[i].id.id + " = " + record.entries[i].id.value);
				}
				
			}
			return ret;
		}
	}
	return '';
}

var Case = function(identifier, pattern, cur_decl_local) {
	this.identifier = generate_identifier(identifier, pattern);
	this.type = 'Case';
	this.semantic = new Array();	
	this.pattern = pattern;
	
	if(typeof identifiers_list[get_last(identifier)] != 'undefined') {
		this.is_good = is_good_pattern(identifier, pattern);
	}
	
	this.semantic = new Array();
	this.cur_decl = cur_decl_local;
	cur_decl++;
	this.cur_decl_else = cur_decl_local+1;
	cur_decl++;
	
	cur_proc += "new Case('"+identifier+"', "+JSON.stringify(pattern)+","+cur_decl_local+");";
	cur_proc += "if(is_good_pattern('"+identifier+"',"+JSON.stringify(pattern)+")){";
	if(typeof state_decl[this.cur_decl] != 'undefined') {
		cur_proc += "this.add_semantics("+JSON.stringify(state_decl[this.cur_decl])+",'',7);";
	}
};

Case.prototype.is_it_good = function() {
	return this.is_good;
};

Case.prototype.set_block = function(state_loc, type) {
	if(type == 1) {
		state_decl[this.cur_decl] = state_loc;
		new Gen_cur_proc_case(this.cur_decl, type);
	}
	else {
		state_decl[this.cur_decl_else] = state_loc;
	}
};

Case.prototype.endIf = function() {
	cur_condition[this.id] = true;
	
	do_end();
};

Case.prototype.set_state_loc = function(state_loc) {
	this.state_loc = state_loc;
};

Case.prototype.get_state_loc = function() {
	return this.state_loc;
};

Case.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	
	
	
	
	
};

Case.prototype.get_semantics = function() {
	return this.semantic;
};

Case.prototype.eval_semantics = function(left, right) {
	var sem = [];
	sem = this.semantic.concat.apply(sem, this.semantic);
	
	var right_2 = [];
	right_2 = right_2.concat.apply(right_2, right);
	
	var left_2 = [];
	left_2 = left_2.concat.apply(left_2, left);
	
	this.semantic = new Array();
	this.semantic.push(right_2.concat(left_2));
	
};

Case.prototype.getIdentifier = function() {
	return this.identifier;
};

Case.prototype.endScope = function() {
	delete identifiers_list[this.identifier];
};

/** 
 * 
 *     PATTERN 
 *
 **/

var Pattern_Expression = function(value) {
	this.type = 'Expression';
	this.id = id;	
};

Pattern_Expression.prototype.get_type = function() {
	return this.type;
};

Pattern_Expression.prototype.get_id = function() {
	return this.id;
};

Pattern_Expression.prototype.set_expression = function(exp) {
	console.debug("\t\t\t ----------- I M IN SET EXPRESSION ")
    new VariableInitializer(this.id,new Expression(exp.get_value()));
};

var Pattern_Parentheses = function(value) {
	this.type = 'Parentheses'+"_"+value.get_type();
	this.value = value;
	this.identifier = value.get_id();
}

Pattern_Parentheses.prototype.get_type = function() {
	 return this.type;
};

Pattern_Parentheses.prototype.get_value = function() {
	return this.value;
};

var Pattern_Identifier = function(identifier) {
	this.type = 'Identifier';
	this.identifier = identifier;
	
	// must be declared
	if(typeof identifiers_list[identifier]=='undefined') {
		
		identifiers_list[identifier]='';
	}
	else {
		
	}
	
};

Pattern_Identifier.prototype.get_type = function() {
	return this.type;
};

Pattern_Identifier.prototype.get_id = function() {
	return this.identifier;
};

Pattern_Identifier.prototype.set_expression = function(exp) {
	console.debug("\t\t\t ----------- I M IN SET EXPRESSION ")
    new VariableInitializer(this.identifier,new Expression(exp.get_value()));
};

var Pattern_List = function(identifier, identifier2) {
	this.type = 'List';
	this.identifier = [identifier, identifier2];
	
	new VariableDeclarator(identifier);
	new VariableDeclarator(identifier2);
	
};

Pattern_List.prototype.get_type = function() {
	return this.type;
};

Pattern_List.prototype.get_id = function() {
	return this.identifier;
};

Pattern_List.prototype.set_expression = function(exp) {
	console.debug("\t\t\t ----------- I M IN SET EXPRESSION ")
	this.value = exp.get_value();
    new VariableInitializer(this.identifier[0],new Expression(exp.get_a()));
	new VariableInitializer(this.identifier[1],new Expression(exp.get_b())); //TODO: generate_list for recursion
};


/*** EXPRESSION ***/

var Expression = function(value) {
	this.type = 'Expression';
	this.value = value;	
};

Expression.prototype.get_type = function() {
	return this.type;
};

Expression.prototype.get_value = function() {
	return this.value;
};

Expression.prototype.get_proc_ret = function() {
	return "new Expression("+this.value.get_proc_ret()+")";
};

var String_literal = function(value) {
	this.type = 'String';
	this.value = value;
};

String_literal.prototype.get_type = function() {
	return this.type;
};

String_literal.prototype.get_value = function() {
	return this.value;
};

String_literal.prototype.get_proc_ret = function() {
	return "new String_literal("+this.value+")";
};

var Keyword_nil = function(value) {
	this.type = 'Nil';
	this.value = value;
};

Keyword_nil.prototype.get_type = function() {
	return this.type;
};

Keyword_nil.prototype.get_value = function() {
	return this.value;
};

Keyword_nil.prototype.get_proc_ret = function() {
	return "new Keyword_nil("+this.value+")";
};

var MathExp = function(l,r, operator) {
	this.type = 'MathExp';
	this.l = l;	
	this.r = r;
	this.operator = operator;
	/*if(this.l.get_type() == 'Identifier' && typeof identifiers_list[this.l.get_id()] == 'undefined') {
		throw new Error("Identifier <code>"+this.l.get_id()+"</code> not declared.");
	}
	if(this.r.get_type() == 'Identifier' &&typeof identifiers_list[this.r.get_id()] == 'undefined') {
		throw new Error("Identifier <code>"+this.r.get_id()+"</code> not declared.");
	}*/
};

MathExp.prototype.get_type = function() {
	return this.type;
};

//TODO make generic
MathExp.prototype.get_proc_ret = function() {
	
	var a = this.l.get_value();
	var a1 = "";
	var b = this.r.get_value();
	
	
	
	/*if(a == '' && b == '' && param_list.indexOf(this.l.id)==-1 && param_list.indexOf(this.r.id)==-1) {
		throw new Error("Identifiers <code>"+this.l.get_id()+"</code> AND <code>"+this.r.get_id()+"</code> are not mapped before the creation of the procedure value.");
	}
	else if(a == '' && param_list.indexOf(this.l.id)==-1) {
		throw new Error("Identifier <code>"+this.l.get_id()+"</code> is not mapped before the creation of the procedure value.");
	}
	else if(typeof b == '' && param_list.indexOf(this.r.id)==-1) {
		throw new Error("Identifier <code>"+this.r.get_id()+"</code> is not mapped before the creation of the procedure value.");
	}*/

		if(a == '' || b == '') {
			return "new MathExp(new "+this.l.get_type()+"('"+this.l.id+"'),new "+this.r.get_type()+"('"+this.r.id+"'),'"+this.operator+"')";
		}
		if(typeof a != 'undefined' && typeof a!='number') {
			if(a.get_type() == 'Identifier') {
				a = "'"+this.l.get_id()+"'";
			}
			else if(a.get_type() == 'Get_cell_value') {
				a = a.get_proc_ret();
			}
		}
		if(this.l.get_type() == 'Identifier') {
			a = "'"+this.l.get_id()+"'";
		} 
		else if(a.type == 'Integer' || a.type == 'Float') {
			a = "new "+a.type+"("+a.value+")";
		}
		
		if(typeof b != 'undefined' && typeof b!='number') {
			if(b.get_type() == 'Identifier') {
				b = "'"+this.r.get_id()+"'";
			}
			else if(b.get_type() == 'Get_cell_value') {
				b = b.get_proc_ret();
			}
		}
		if(this.r.get_type() == 'Identifier') {
			b = "'"+this.r.get_id()+"'";
		} 
		else if(b.type == 'Integer' || b.type == 'Float') {
			b = "new "+b.type+"("+b.value+")";
		}
		
		
	
	return "new MathExp(new "+this.l.get_type()+"("+a+"),new "+this.r.get_type()+"("+b+"),'"+this.operator+"')";
};

MathExp.prototype.get_value = function() {
	if(typeof this.l.get_value() == 'undefined' || typeof this.r.get_value() == 'undefined') {
		return 'undefined';
	}
	
	var left = this.l.get_value();
	var right = this.r.get_value();
	
	if(this.l.get_type() == 'Identifier' && typeof identifiers_list[get_last(this.l.get_id())] != 'undefined') {
		left = identifiers_list[get_last(this.l.get_id())].get_value();
	}
	else if(typeof left != 'number' && left.get_value() != 'undefined' && left.get_type() == 'Get_cell_value') {
		left = left.get_value().get_value();
		
	}
	if(this.r.get_type() == 'Identifier' && typeof identifiers_list[get_last(this.r.get_id())] != 'undefined') {
		right = identifiers_list[get_last(this.r.get_id())].get_value();
	}
	else if(typeof right != 'number' && typeof right.get_value() != 'undefined' && right.get_type() == 'Get_cell_value') {
		right = right.get_value().get_value();
		
	}
	switch(this.operator) {
	case "+":
		if(left.type != right.type) {
			throw new Error("The <code>+</code> operation can only work with 2 Integers or 2 Floats.");
		}
		this.value = left.value + right.value;
		break;
	case "-":
		if(left.type != right.type) {
			throw new Error("The <code>-</code> operation can only work with 2 Integers or 2 Floats.");
		}
		this.value = left.value - right.value;
		break;
	case "*":
		if(left.type != right.type) {
			throw new Error("The <code>*</code> operation can only work with 2 Integers or 2 Floats.");
		}
		this.value = left.value * right.value;
		break;
	case "/":
		if(left.type != 'Float' && right.type != 'Float') {
			throw new Error("The <code>/</code> operation can only work with Floats.");
		}
		this.value = left.value / right.value;
		break;
	case "div":
		if(left.type != 'Integer' && right.type != 'Integer') {
			throw new Error("The <code>div</code> operation can only work with Integer.");
		}
		this.value = Math.floor(left.value / right.value);
		break;
	case "mod":
		if(left.type != 'Integer' && right.type != 'Integer') {
			throw new Error("The <code>mod</code> operation can only work with Integer.");
		}
		this.value = left.value % right.value;
		break;
	}
	return this.value;
};

var Parenthesis = function(value) {
	this.type = 'Parenthesis';
	this.value = value;	
};

Parenthesis.prototype.get_type = function() {
	return this.type;
};

Parenthesis.prototype.get_value = function() {
	return this.value;
};

var Integer = function(value) {
	this.type = 'Integer';
	this.value = value;	
};

Integer.prototype.get_type = function() {
	return this.type;
};

Integer.prototype.get_value = function() {
	return this.value;
};

Integer.prototype.get_proc_ret = function() {
	return "new Integer("+this.value+")";
};

var Float = function(value) {
	this.type = 'Float';
	this.value = value;	
};

Float.prototype.get_type = function() {
	return this.type;
};

Float.prototype.get_value = function() {
	return this.value;
};

Float.prototype.get_proc_ret = function() {
	return "new Float("+this.value+")";
};

var Identifier = function(id, value) {
	this.type = 'Identifier';
	this.id = id;	
	if(typeof value == 'undefined') {
		
		if(identifiers_list[get_last(id)] != "" && typeof identifiers_list[get_last(id)] != 'undefined') {
			this.value = identifiers_list[get_last(id)].get_value();
		}
		else {
			this.value = identifiers_list[get_last(id)];
			/*if(typeof this.value == 'undefined') {
				throw new Error("Identifier <code>"+id+"</code> is not declared or not initialized.")
			}*/
		}
	}
	else {
		this.value = value;
	}
	
	
};

Identifier.prototype.get_type = function() {
	return this.type;
};

Identifier.prototype.get_id = function() {
	return this.id;
};

Identifier.prototype.get_value = function() {
	return this.value;
};

var ReturnIdentifier = function(id) {
	this.type = 'ReturnIdentifier';
	this.id = id;	
	if(typeof value == 'undefined') {
		if(identifiers_list[get_last(id)] != "" && typeof identifiers_list[get_last(id)] != 'undefined') {
			this.value = identifiers_list[get_last(id)].get_value();
		}
		else {
			if(typeof identifiers_nbr[id]=='undefined') {
				
				identifiers_nbr[id] = 0;
				this.id = id;
			}
			else {
				
				identifiers_nbr[id]+=1;
				new_value = identifiers_nbr[id];
				this.id = identifier+'_'+new_value;
				
			}
			identifiers_list[this.id]='';
			return_identifier.push(this.id);
			
			/*if(typeof this.value == 'undefined') {
				throw new Error("Identifier <code>"+id+"</code> is not declared or not initialized.")
			}*/
		}
	}
	else {
		this.value = value;
	}
};

ReturnIdentifier.prototype.get_type = function() {
	return this.type;
};

ReturnIdentifier.prototype.get_id = function() {
	return this.id;
};

ReturnIdentifier.prototype.get_value = function() {
	return this.value;
};

var Cell = function(value) {
	this.type = 'Cell';
	this.value = new Identifier(value);
	this.identifier = "c"+((cells_list.length)+1);
	
	cells_list.push([this.identifier, this.value]);
};

Cell.prototype.get_type = function() {
	return this.type;
};

Cell.prototype.get_id = function() {
	return this.identifier;
};

Cell.prototype.get_value = function() {
	return this.value;
};

Cell.prototype.update = function(value) {
	this.value = value;
};

/*** LIST ***/

var List = function(exp1, exp2) {
	this.type = 'List';
	this.l = new Object();
	this.l.a = exp1;
	this.l.b = exp2;
};

List.prototype.get_a = function() {
	return this.l.a;
};

List.prototype.get_b = function() {
	return this.l.b;
};

List.prototype.get_value = function() {
	
	var to_s = "'|'(";
	var cur = this.l;
	

    if(typeof cur.a =='object') {
		to_s = to_s+cur.a.get_value();
	}
	else {
		to_s = to_s+cur.a;
	}
	
	if(typeof cur.b =='object') {
		to_s = to_s+" "+cur.b.get_value();
	}
	else {
		to_s = to_s+" "+cur.b;
	}
	
	
	return to_s+")";
};

List.prototype.get_type = function() {
	return this.type;
};


var Record_entry = function(feature, id) {
	this.type = 'Record_entry';
	this.feature = feature;
	this.id = id;	
};

Record_entry.prototype.get_type = function() {
	return this.type;
};

Record_entry.prototype.get_feature = function() {
	return this.feature;
};

Record_entry.prototype.get_id = function() {
	return this.id;
};

var Record = function(label, entries) {
	this.type = 'Record';
	this.label = label;
	this.entries = entries;
	this.record = {};
	
	// entries is a list of Record_entry
	// we must add all the [feature] = id in a dictionary
	for(var i=0; i<entries.length; i++) {
		this.record[entries[i].feature] = entries[i].id;
	}
};

Record.prototype.get_type = function() {
	return this.type;
};

Record.prototype.get_feature = function() {
	return this.feature;
};

Record.prototype.get_record = function() {
	return this.record;
};

Record.prototype.get_value = function() {
	var str = this.label+"(";
	for(var i=0; i<this.entries.length; i++) {
		str = str + this.entries[i].feature  +":"+ this.entries[i].id.id + " ";
	}
	if(str.slice(-1) == " ") {
		str=str.substring(0, str.length-1);
	}
	str += ")";
	return str;
};

Record.prototype.get_proc_ret = function() {
	var ret = "'"+this.label+"', [";
	for(var i=0; i<this.entries.length; i++) {
		ret = ret + "new Record_entry('"+this.entries[i].feature+"',new Identifier('"+this.entries[i].id.id+"')),";
	}
	if(ret.slice(-1) == ",") {
		ret=ret.substring(0, ret.length-1);
	}
	return ret+"]";
};

/*** -------------- PROCEDURES -------------- ***/


function get_state(start, end) {
	var lines = document.getElementById("code_"+thevalueoftheexeclick_2).value.split('\n');
	var j = start.first_line-1;
	
	state = lines[j].substring(lines[j].indexOf("proc"));
	
	state = state.split(' ').join("&nbsp");

	for(j=start.first_line; j<end.last_line; j++) {
		state += ("<p>"+lines[j].split(' ').join("&nbsp")+"</p>");
	}
	
	
	return state;
}

function get_ce() {
	var str = "";
	for(var keys in identifiers_list) {		
		if(identifiers_list[keys] == "") {
			if(return_identifier.indexOf(keys)==-1) {
				str += ", ";
				str = str + keys.toLowerCase();
			}
			else {
				continue
			}			
		}
		else if(typeof identifiers_list[keys].get_value() == 'object') {			
			if(identifiers_list[keys].value.type != 'ReturnIdentifier') {
				str += ", ";
				a = identifiers_list[keys].get_value();
				while(typeof a.value != 'undefined') {
					a = a.get_value();
				}
				str = str + keys.toLowerCase() + " = " + a;
			}				
		}				
	}
	return str;
}

function get_return_places(param) {
	// recoit des params, retourne une liste d'index (0..N) des valeurs de retour
	var ret = new Array();
	for(var i=0; i<param.length; i++) {
		if(param[i].type == 'ReturnIdentifier') {
			ret.push(i);
		}
	}
	return ret;
}

function add_param(param) {
	for(var i=0; i<param.length; i++) {
		param_list.push(param[i].get_id());
	}
}

var Procedure = function(param, start, end, content) {
	this.type = 'Procedure';
	this.param = param;
	this.ce = cur_ce;
	this.CE = cur_CE;
	this.value = "("+get_state(start,end)+""+this.ce+")";
	this.semantic = new Array();
	this.steps = "";
	this.content = content;	
	
	add_param(param);
	this.return_places = get_return_places(param);
	
	
	
};

Procedure.prototype.get_value = function() {
	return this.value;
};

Procedure.prototype.get_type = function() {
	return this.type;
};

Procedure.prototype.get_param = function() {
	return this.param;
};

Procedure.prototype.get_content = function() {
	return this.content;
};

Procedure.prototype.set_id = function(identifier) {
	this.id = identifier;
	proc[identifier] = cur_proc;
	CE[identifier] = this.CE;
	cur_proc = "";
	
};

Procedure.prototype.get_steps = function() {
	return this.steps;
};

Procedure.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	if(stack.indexOf('undefined') >-1) {
		this.semantic.push(sem);
	}
	
	
	
	
	
};

Procedure.prototype.eval_semantics = function(left, right) {
	var sem = [];
	sem = this.semantic.concat.apply(sem, this.semantic);
	
	var right_2 = [];
	right_2 = right_2.concat.apply(right_2, right);
	
	var left_2 = [];
	left_2 = left_2.concat.apply(left_2, left);
	
	this.semantic = new Array();
	this.semantic.push(right_2.concat(left_2));
	
};

Procedure.prototype.get_semantics = function() {
	return this.semantic;
};

Procedure.prototype.call = function(id, args) {
	if(args.length == this.param.length) {
		redo_proc(id, args, this.param);
	}
	else {
		
	}	
};

Procedure.prototype.compile = function() {
new VariableInitializer(this.param[2], new Expression(identifiers_list[this.param[0]].get_value() +identifiers_list[this.param[1]].get_value()));
}

function get_state_call(start, end) {
	var state = start;
	state.last_column = end.last_column;
	state.last_line = end.last_line;
	return state;
}

function get_last(identifier) {
	// parcourir identifier_lists et trouver la clé qui a le nbr
	var ret = new Array();
	for(var key in identifiers_list) {
		if(key.indexOf(identifier)==0) {
			var index = key.indexOf('_')
			if(index>-1 && index == identifier.length) {
				ret.push(key);
			}
			else if(key.length == identifier.length){
				ret.push(key);
			}
		}
	}
	
	return ret.slice(-1)[0];
}

function get_last_closure(identifier, closure) {
	// parcourir identifier_lists et trouver la clé qui a le nbr
	var ret = new Array();
	for(var key in closure) {
		if(key.indexOf(identifier)==0) {
			var index = key.indexOf('_')
			if(index>-1 && index == identifier.length) {
				ret.push(key);
			}
			else if(key.length == identifier.length){
				ret.push(key);
			}
		}
	}
	
	return ret.slice(-1)[0];
}

function get_last_if(identifier) {
	// parcourir identifier_lists et trouver la clé qui a le nbr
	if(typeof identifier == 'number') {
		return identifier;
	}
	var ret = new Array();
	for(var key in identifiers_list) {
		if(key.indexOf(identifier)==0) {
			var index = key.indexOf('_')
			if(index>-1 && index == identifier.length) {
				ret.push(key);
			}
			else if(key.length == identifier.length){
				ret.push(key);
			}
		}
	}
	
	return ret.slice(-2)[0];
}

function get_last_init(identifier) {
	// parcourir identifier_lists et trouver la clé qui a le nbr
	var ret = new Array();
	for(var key in identifiers_list) {
		if(key.indexOf(identifier)==0 && identifiers_list[key]!="") {
			var index = key.indexOf('_')
			if(index>-1 && index == identifier.length) {
				ret.push(key);
			}
			else if(key.length == identifier.length){
				ret.push(key);
			}
		}
	}
	
	return ret.slice(-1)[0];
}

function generate_new_args(args) {
	var str = "";
	for(var i=0; i<args.length; i++){
		if(i!=0) {
			str += ",";
		}
		str = str + "new "+args[i].type+"('"+args[i].get_id()+"')";
	}
	return str;
}

var ProcedureCall = function(id, args, start, end, cur_decl_local) {
	
	this.id = id;
	this.args = args;
	this.semantic = new Array();
	this.call = get_state_call(start, end);
	this.decl_nbr = cur_decl_local;
	cur_decl++;
	
	new_args = generate_new_args(args);
	
	cur_proc += "new ProcedureCall('"+id+"',["+new_args+"],"+JSON.stringify(start)+","+JSON.stringify(end)+","+this.decl_nbr+");";
	if(identifiers_list[this.id] != '') {
		
		//cur_proc += "this.add_semantics("+JSON.stringify(this.call)+","+"'',42);";
		cur_proc+="this.add_semantics("+JSON.stringify(identifiers_list[id].get_content())+",'',42);";
		var my_proc = cur_proc;
		cur_proc = "";
		this.redo_proc(id, args, identifiers_list[this.id].get_param());
		cur_proc = my_proc+cur_proc;
	}
};

ProcedureCall.prototype.get_semantics = function() {
	//var c = new Block(); 
	//c.add_semantics('','zx = 3',40);
	//return c.get_semantics();
	return this.semantic;
};

ProcedureCall.prototype.add_semantics = function(state_loc, stack, type) {
	var sem = new Object();
	sem.state_loc = state_loc;
	sem.stack = stack;
	sem.type = type;
	this.semantic.push(sem);
	state_decl[this.decl_nbr] = sem;
	
	
	
	
	
};

ProcedureCall.prototype.redo_proc = function(id, args, param) {
	// id : l'id de la procedure
	// args : les arguments avc les valeurs choisies par l'utilisateur
	// param : les noms officiels des arguments de la procedure
	
	if(typeof proc[id]=='undefined') {
		return -1;
	}
	if(typeof infinite_loop_avoid[id] == 'undefined') {
		infinite_loop_avoid[id] = 0;
	}
	infinite_loop_avoid[id]++;
	if(infinite_loop_avoid[id]>10000) {
		throw new Error("I think there is an infinite loop somewhere.");
	}
	cur_proc="";
	var closure = jQuery.extend(true, {}, identifiers_list);
	identifiers_list = jQuery.extend(true, {}, CE[id]);
	identifiers_list[id] = closure[id];
	
	// 1) créer les nouvelles variables avec les noms param
	for(var i=0; i<param.length; i++) {
		
		new VariableDeclarator(param[i].get_id(), cur_decl);
		/*if(param[i].get_type() == 'ReturnIdentifier') {
			new VariableDeclarator(param[i].get_id(), cur_decl);
			//
		}*/
	}
	
	// 2) assigner les param aux args
	var return_id = {};
	for(var j=0; j<args.length; j++) {
		
		
		
		if(identifiers_list[id].return_places.indexOf(j) >-1) {			
			return_id[get_last(param[j].get_id())]=args[j];
		}
		else {
			if(args[j].value.type == 'MathExp') {
				if(isNaN(args[j].value.value)) {				
					return
				}
				new VariableInitializer(param[j].get_id(), new Expression(new Integer(args[j].value.value)), cur_decl);
				//this.add_semantics(identifiers_list[id].get_content(), get_last(param[j].get_id())+' = '+args[j].value.value , 2);
			}
			else if(closure[get_last_closure(args[j].id, closure)].type == 'Record') {
				new VariableInitializer(param[j].get_id(), closure[get_last_closure(args[j].id, closure)], cur_decl);
			}
			else {
				new VariableInitializer(param[j].get_id(), args[j], cur_decl);
				//"this.add_semantics("+JSON.stringify(identifiers_list[id].get_content()+", "+get_last(param[j].get_id())+' = '+args[j].get_value()+" , 2)";
			}
			
		}
	}	
	
	// 3) je sais ce que la procédure fait en le stockant sous forme de string 'new VariableDeclarator('ZX'); new VariableInitializer('ZX', new Expression(3));' et puis faire eval de ce bordel
	//proc[id] = "new VariableDeclarator('ZX'); new VariableInitializer('ZX', new Identifier('X'));";
	/*this.add_semantics('','zx',1);
	this.add_semantics('','zx = 3',2);*/
	
	
	eval(proc[id]);
	var sem_tmp = this.semantic;
	this.semantic = new Array();
	this.add_semantics(identifiers_list[id].get_content(), '', 1);
	
	//
	
	for(var key in return_id) {
		
		
		cur_proc = cur_proc.replace(key, return_id[key].get_id());		
		cur_proc = cur_proc.replace(key.toLowerCase()+" ",return_id[key].get_id().toLowerCase()+" ");		
	}
	
	var caca = cur_proc;
	cur_proc = "";		
	eval(caca);
	if(cur_proc.indexOf('undefined')>-1){
		cur_proc = caca;
	}
		
	this.semantic.reverse();	
	identifiers_list = jQuery.extend(true, {}, closure);
	
	// SEMANTIQUE 
};

/*** -------------- UTILS -------------- ***/


function sem_only(str) {
	var arr = str.match(/this.add_semantics*[(]+[\a-zA-Z]*[)]$/gm);
	return(arr);
}

/**
 * Prepares the 'states' array and the 'stacks' array to display semantics
 *
 * @param state_loc : informations about the scope if the current state
 * @param stack : the stack as it is (request to be toLowercase before)
 */
function displaySemantics(state_loc, stack, type) {
	var lines = document.getElementById("code_"+thevalueoftheexeclick_2).value.split('\n');
	var state = "";
	//
	
	if(state_loc != '') {
		for(var i=state_loc.first_line-1; i<state_loc.last_line; i++) {
			state += ("<p>"+lines[i].split(' ').join("&nbsp")+"</p>");
		}
	}
	
	//
	if(cnt_exe == 0) {
		states[cnt_exe] = '<fieldset id="state_'+cnt_exe+'" class="hero-unit"><legend>'+cnt_exe+'</legend><p>DONE !</fieldset>';
	}
	else {
		states[cnt_exe] = '<fieldset id="state_'+cnt_exe+'" class="hero-unit"><legend>'+cnt_exe+'</legend><p><div class="scrollable">'+state+'</div></fieldset>';
	}
	
	stacks[cnt_exe] = [stack, type];
	//
	cnt_exe++;
}

/**
 * Returns the stack from the previous state as one box
 * cell_2s est generée a l'envers donc le top est la nouvelle valeur et on ajoute les anciennes en dessous
 *
 * @param from : the index from which we want the state (descending order)
 */
function getStackFrom(from) {
	var stack_2s = "";
	var cell_2s = "";
	
	if(from==cnt_exe-1) {
		stack_2s = "<p>"+stacks[from][0]+"</p>";
	}
	else {
		var index = -1;
		var line = stacks[from][0];
		
		switch(stacks[from][1]){
		case 2: // is it an initialization ?
			// find the line in stacks to skip
			//
			
			var identifier = line.substring(0,line.indexOf(" = "));
			index = findDeclaration(identifier, from);
			break;
		}
		for(var i=from; i<cnt_exe; i++) {
			
			if(exclude_from_stack.indexOf(i)>=0) {
				continue;
			}
			if(stacks[i][1]!=100) {
				if( Object.prototype.toString.call(stacks[i][0]) === '[object Array]' ) {
					for(var k=0; k<stacks[i][0].length; k++) {
						if(!is_array_in_array(exclude_from_stack, [i, k])) {
							stack_2s = stack_2s + "<p>"+stacks[i][0][k].toLowerCase()+"</p>";
						}	 
					}
				}
				else {
					
					var end = stacks[i][0].indexOf(" ");
					if(end == -1) {
						end = stacks[i][0].length;
					}
					var variable_name = stacks[i][0].substring(0,end);
					
					var is_cell_init = stacks[i][0].indexOf(" := ");
					
					// not a cell init
					var start = stacks[i][0].indexOf("= ")+2;
					if(start == 1) {
						start = stacks[i][0].length;
					}
					var value = stacks[i][0].substring(start, stacks[i][0].length);
					var index = is_value_in_array(cells_list, value);
					
					if(index >= 0 && (is_cell_init<0)) {
						stack_2s = stack_2s + "<p>"+stacks[i][0].toLowerCase()+"</p>";
						if(cell_2s == "") {
							cell_2s = cell_2s + "<p>"+cells_list[index][0]+" : "+cells_list[index][1].get_id()+"</p>";
						}
						else {
							cell_2s = cell_2s;
						}
						
					}
					else if(is_cell_init >= 0) {
						cell_2s = cell_2s+ "<p>"+stacks[i][0].replace("=","")+"</p>";
					}
					else {
						stack_2s = stack_2s + "<p>"+stacks[i][0].toLowerCase()+"</p>";
					}
					
				}
			}
		}
	}
	
	cell_2s = clean_cell_2s(cell_2s);
	stack_2s = stack_2s.split(' ').join("&nbsp");
	
	if(cell_2s == "") {
		return '<fieldset id="stack_'+from+'" class="hero-unit"><legend>'+(cnt_exe-from)+'</legend><div class="scrollable">'+stack_2s+'</div></fieldset>';
	}
	return '<fieldset id="stack_'+from+'" class="hero-unit stack"><legend>'+(cnt_exe-from)+'</legend><div class="scrollable">'+stack_2s+'</div><div class="multiple_store"><div class="scrollable>"'+cell_2s+'</div></div></fieldset>';
}

function is_array_in_array(array, sub) {
	for(var i=0; i<array.length; i++) {
		if(typeof array[i] == 'object') {
			return (array[i][0] == sub[0] && array[i][1] == sub[1]);
		}
	}
	return false;
}

/*
 * for cells which are [identifier, identifier]
 */
function is_value_in_array(array, sub) {
	
	if(sub.length>0) {
		for(var i=0; i<array.length; i++) {
			
			if(array[i][0] == sub) {
				return i;
			}
		}
	}
	
	return -1;
}

function findDeclaration(identifier, from) {
	for(var i=from+1; i<cnt_exe; i++) {
		// 1) est ce que cet element de la stack est une stack?
		if(typeof stacks[i][0] == 'object') {
			// si oui, la parcourir
			for(var j=0; j<stacks[i][0].length; j++) {
				// is it a declaration or a cell ?
				var end = stacks[i][0][j].indexOf(" ");
				if(end == -1) {
					end = stacks[i][0][j].length;
				}
				
				var variable_name = stacks[i][0][j].substring(0,end);
				if(stacks[i][1] == 1 || cells_list.indexOf(variable_name)!=-1) {
					index = stacks[i][0][j].indexOf(identifier);
					if(index>-1 && stacks[i][0].length == identifier.length) {					
						exclude_from_stack.push([i, j]);
						
					}
				}
			}	
		}
		else {
			// is it a declaration or a cell ?
			var end = stacks[i][0].indexOf(" ");
			if(end == -1) {
				end = stacks[i][0].length;
			}
			
			var variable_name = stacks[i][0].substring(0,end);
			if(stacks[i][1] == 1 || cells_list.indexOf(variable_name)!=-1) {
				index = stacks[i][0].indexOf(identifier);
				if(index>-1 && stacks[i][0].length == identifier.length) {
					exclude_from_stack.push(i);
					
				}
			}
		}
	}
	return -1;
}

var Get_entry_record = function(identifier, entry) {
	this.type = 'Get_entry_record';
	this.identifier = identifier;
	this.entry = entry;
	if(typeof identifiers_list[get_last(identifier)].record[entry] != 'undefined') {
		if(typeof identifiers_list[get_last(identifier)].record[entry].value != 'undefined') {
			this.value = identifiers_list[get_last(identifier)].record[entry].value.value;
		}		    
	}
	else {
		throw new Error("Feature <code>"+entry+"</code> is not in the record <code>"+identifier+"</code>.");
	}
	
};

Get_entry_record.prototype.get_type = function() {
	return this.type;
};

Get_entry_record.prototype.get_id = function() {
	return this.identifier;
};

Get_entry_record.prototype.get_value = function() {
	return this.value;
};

Get_entry_record.prototype.get_proc_ret = function() {
	return "new Get_entry_record('"+this.identifier+"','"+this.entry+"')";
};

// Input: <p>c1 : X</p><c1 : Y</p><p>c2 : R</p>
// Output: <p>c1 : X</p><p>c2 : R</p>
function clean_cell_2s(cell_2s) {
	var ret = "";
	var past = new Array();
	if(cell_2s != "") {
		var arr = cell_2s.split("</p>");
		var value, cur;
		for(var i=0; i<arr.length; i++) {
			value = arr[i].substring(3, arr[i].indexOf(" :"));
			if(past.indexOf(value)==-1) {
				past.push(value);
				ret = ret+arr[i]+"</p>";
			}
		}
	}
	return ret;
}